name: Build release CLI artifacts

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      CLI_RELEASES_TOKEN:
        required: true

permissions:
  contents: read
  id-token: write

env:
  CLI_PATH: apps/cli
  BIN_NAME: skopio-cli
  TARGET_REPO: ${{ github.repository_owner }}/cli-releases

jobs:
  guard:
    uses: ./.github/workflows/_guard-release-branch.yml

  release-cli:
    needs: guard
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup build env
        uses: ./.github/actions/setup-env
        with:
          rust_target: aarch64-apple-darwin, x86_64-apple-darwin

      - name: Setup Apple signing keychain
        id: keychain
        shell: bash
        run: |
          set -euo pipefail
          KEYCHAIN="$RUNNER_TEMP/build.keychain-db"

          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

          security list-keychains -d user -s "$KEYCHAIN"
          security default-keychain -d user -s "$KEYCHAIN"

          echo "$MAC_CERT_P12_BASE64" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "$MAC_CERT_PASSWORD" \
            -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcrun
          rm -f cert.p12

          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security find-identity -v -p codesigning "$KEYCHAIN" || true

          ID_SHA="$(security find-identity -v -p codesigning "$KEYCHAIN" \
            | awk '/Developer ID Application/ {print $2; exit}')"
          if [ -z "$ID_SHA" ]; then
            ID_SHA="$(security find-identity -v -p codesigning "$KEYCHAIN" \
              | awk '/Developer ID/ {print $2; exit}')"
          fi
          if [ -z "$ID_SHA" ]; then
            echo "::error::No Developer ID Application identity found in temp keychain."
            exit 1
          fi

          echo "keychain=$KEYCHAIN"   >> "$GITHUB_OUTPUT"
          echo "id_sha=$ID_SHA"       >> "$GITHUB_OUTPUT"
        env:
          MAC_CERT_P12_BASE64: ${{ secrets.MAC_CERT_P12_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Detect version from Cargo.toml
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          VER=$(cargo metadata --format-version=1 --no-deps --manifest-path "${{ env.CLI_PATH }}/Cargo.toml" \
                | /usr/bin/python3 -c 'import sys,json;print(json.load(sys.stdin)["packages"][0]["version"])')
          TAG="v${VER}"
          [[ "$VER" =~ -([A-Za-z0-9.+-]+)$ ]] && PRERELEASE=true || PRERELEASE=false
          echo "version=$VER"     >> $GITHUB_OUTPUT
          echo "tag=$TAG"         >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

      - name: Build aarch64
        working-directory: ${{ env.CLI_PATH }}
        run: cargo build --release --locked --target aarch64-apple-darwin

      - name: Build x86_64
        working-directory: ${{ env.CLI_PATH }}
        run: cargo build --release --locked --target x86_64-apple-darwin

      - name: Sign, zip, notarize, checksums
        id: pkg
        shell: bash
        env:
          KEYCHAIN: ${{ steps.keychain.outputs.keychain }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          ID_SHA: ${{ steps.keychain.outputs.id_sha }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          set -euo pipefail
          mkdir -p dist
          TARGET_DIR="${CARGO_TARGET_DIR:-target}"

          security list-keychains -d user -s "$KEYCHAIN"
          security default-keychain -d user -s "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"

          sign_bin() {
            local bin="$1"
            /usr/bin/codesign \
              --keychain "$KEYCHAIN" \
              --force --options runtime --timestamp \
              --sign "$ID_SHA" \
              "$bin"
            /usr/bin/codesign --verify --verbose=2 "$bin"
            /usr/sbin/spctl -a -vv -t execute "$bin" || true
          }

          notarize_zip() {
            local zip="$1"
            /usr/bin/xcrun notarytool submit "$zip" \
              --apple-id "$APPLE_ID" --team-id "$TEAM_ID" --password "$AC_PASSWORD" --wait
          }

          pack() {
            local arch="$1" cpu
            case "$arch" in
              aarch64-apple-darwin) cpu="aarch64" ;;
              x86_64-apple-darwin)  cpu="x86_64"  ;;
              *) cpu="$arch" ;;
            esac
            local bin="${TARGET_DIR}/${arch}/release/${{ env.BIN_NAME }}"
            local staged="dist/${{ env.BIN_NAME }}-darwin-${cpu}"
            local zip="dist/${{ env.BIN_NAME }}-darwin-${cpu}.zip"

            [[ -f "$bin" ]] || { echo "❌ Missing $bin"; ls -la "${TARGET_DIR}/${arch}/release" || true; exit 1; }

            cp "$bin" "$staged"
            strip -S -x "$staged" || true
            sign_bin "$staged"
            (cd dist && /usr/bin/zip -q "$(basename "$zip")" "$(basename "$staged")")
            notarize_zip "$zip"

            local sh256; sh256=$(shasum -a 256 "$zip" | awk '{print $1}')
            local size;  size=$(stat -f "%z" "$zip")
            echo "${sh256}  $(basename "$zip")" >> dist/checksums_sha256.txt
            echo "${arch}_zip=$zip"   >> $GITHUB_OUTPUT
            echo "${arch}_sha=$sh256" >> $GITHUB_OUTPUT
            echo "${arch}_size=$size" >> $GITHUB_OUTPUT
          }

          : > dist/checksums_sha256.txt
          pack aarch64-apple-darwin
          pack x86_64-apple-darwin

      - name: Extract release notes from CHANGELOG.md
        id: changelog
        working-directory: ${{ env.CLI_PATH }}
        shell: bash
        run: |
          set -euo pipefail
          VER="${{ steps.meta.outputs.version }}"
          NOTES="$GITHUB_WORKSPACE/${{ env.CLI_PATH }}/RELEASE_NOTES.md"
          CHANGELOG="CHANGELOG.md"
          BODY="$(mktemp)"
          test -f "$CHANGELOG" || { echo "Missing $CHANGELOG"; exit 1; }

          awk -v ver="$VER" '
            BEGIN { patv = "^##[[:space:]]*\\[?v?" ver "\\]?([[:space:]-]|$)"; insec=0 }
            $0 ~ patv { insec=1; next }
            insec && /^##[[:space:]]*\[?v?[0-9]/ { insec=0 }
            insec { print }
          ' "$CHANGELOG" > "$BODY" || true

          if ! [ -s "$BODY" ]; then
            echo "No changelog section found for version $VER in CHANGELOG.md" >&2
            exit 1
          fi

          { echo "# Changelog"; echo; cat "$BODY"; } > "$NOTES"
          echo "notes_file=$NOTES" >> "$GITHUB_OUTPUT"

      - name: Create/Update Release in org/cli-releases
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.CLI_RELEASES_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ steps.meta.outputs.tag }}"
          VER="${{ steps.meta.outputs.version }}"
          PRERELEASE="${{ steps.meta.outputs.prerelease }}"
          NOTES="${{ steps.changelog.outputs.notes_file }}"
          REPO="${{ env.TARGET_REPO }}"

          if gh release view "$TAG" -R "$REPO" >/dev/null 2>&1; then
            gh release edit "$TAG" -R "$REPO" --prerelease="$PRERELEASE" --notes-file "$NOTES"
          else
            gh release create "$TAG" -R "$REPO" --title "v${VER}" --prerelease="$PRERELEASE" --notes-file "$NOTES"
          fi

          gh release upload "$TAG" -R "$REPO" \
            "${{ steps.pkg.outputs.aarch64-apple-darwin_zip }}" \
            "${{ steps.pkg.outputs.x86_64-apple-darwin_zip }}" \
            dist/checksums_sha256.txt \
            --clobber

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.2
        with:
          cosign-release: "v2.5.3"

      - name: Cosign sign artifacts
        env:
          COSIGN_EXPERIMENTAL: "1"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/signatures
          sign() {
            local file="$1" base; base=$(basename "$file")
            cosign sign-blob --yes "$file" \
              --output-signature "dist/signatures/$base.sig" \
              --output-certificate "dist/signatures/$base.cert" \
              --bundle "dist/signatures/$base.bundle"
          }
          sign "${{ steps.pkg.outputs.aarch64-apple-darwin_zip }}"
          sign "${{ steps.pkg.outputs.x86_64-apple-darwin_zip }}"

      - name: Upload signatures to external Release
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.CLI_RELEASES_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ steps.meta.outputs.tag }}"
          REPO="${{ env.TARGET_REPO }}"
          gh release upload "$TAG" -R "$REPO" dist/signatures/* --clobber

      - name: Attach latest.json (non-prerelease)
        if: ${{ steps.meta.outputs.prerelease != 'true' }}
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.CLI_RELEASES_TOKEN }}
        run: |
          set -euo pipefail
          REPO="${{ env.TARGET_REPO }}"
          TAG="${{ steps.meta.outputs.tag }}"
          VER="${{ steps.meta.outputs.version }}"
          FILE_ARM="$(basename "${{ steps.pkg.outputs.aarch64-apple-darwin_zip }}")"
          FILE_X64="$(basename "${{ steps.pkg.outputs.x86_64-apple-darwin_zip }}")"
          BASE="https://github.com/${REPO}/releases/download/${TAG}"
          cat > latest.json <<EOF
          {
            "version": "$VER",
            "released_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "assets": {
              "darwin-aarch64": {
                "url": "$BASE/$FILE_ARM",
                "sha256": "${{ steps.pkg.outputs.aarch64-apple-darwin_sha }}",
                "size": ${{ steps.pkg.outputs.aarch64-apple-darwin_size }},
                "sig": {
                  "type": "cosign",
                  "signature_url": "$BASE/signatures/$FILE_ARM.sig",
                  "certificate_url": "$BASE/signatures/$FILE_ARM.cert",
                  "bundle_url": "$BASE/signatures/$FILE_ARM.bundle"
                }
              },
              "darwin-x86_64": {
                "url": "$BASE/$FILE_X64",
                "sha256": "${{ steps.pkg.outputs.x86_64-apple-darwin_sha }}",
                "size": ${{ steps.pkg.outputs.x86_64-apple-darwin_size }},
                "sig": {
                  "type": "cosign",
                  "signature_url": "$BASE/signatures/$FILE_X64.sig",
                  "certificate_url": "$BASE/signatures/$FILE_X64.cert",
                  "bundle_url": "$BASE/signatures/$FILE_X64.bundle"
                }
              }
            }
          }
          EOF
          gh release upload "${TAG}" -R "$REPO" latest.json --clobber
